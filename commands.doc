# To show the remote configuration

# Showing Your Remotes
git remote 
# . It lists the shortnames of each remote handle youÕve specified. If youÕve cloned your repository, you should at least see origin Ð that is the default name Git gives to the server you cloned
$ git clone https://github.com/schacon/ticgit Cloning into 'ticgit'... remote: Reusing existing pack: 1857, done. remote: Total 1857 (delta 0), reused 0 (delta 0) Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done. Resolving deltas: 100% (772/772), done. Checking connectivity... done. $ cd ticgit $ git remote origin
git remoteÊÐv
# which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:
$ git remote -v origin	https://github.com/schacon/ticgit (fetch) origin	https://github.com/schacon/ticgit (push)
If you have more than one remote, the command lists them all.
$ cd grit $ git remote -v bakkdoor  
https://github.com/bakkdoor/grit (fetch) bakkdoor  
https://github.com/bakkdoor/grit (push) cho45     
https://github.com/cho45/grit (fetch) cho45     
https://github.com/cho45/grit (push) defunkt   
https://github.com/defunkt/grit (fetch) defunkt   
https://github.com/defunkt/grit (push) koke      
git://github.com/koke/grit.git (fetch) koke      
git://github.com/koke/grit.git (push) origin    
git@github.com:mojombo/grit.git (fetch) origin    
This means we can pull contributions from any of these users pretty easily. We may additionally have permission to push to one or more of these, though we canÕt tell that here.
Adding Remote Repositories
WeÕve mentioned and given some demonstrations of how theÊcloneÊcommand implicitly adds theÊorigin remote for you. HereÕs how to add a new remote explicitly. To add a new remote Git repository as a shortname you can reference easily, runÊgit remote add <shortname> <url>:
$ git remote origin 
$ git remote add pb https://github.com/paulboone/ticgit 
$ git remote -v origin	
	https://github.com/schacon/ticgit (fetch) origin	https://github.com/schacon/ticgit (push) pb	https://github.com/paulboone/ticgit (fetch) pb	https://github.com/paulboone/ticgit (push)
Now you can use the stringÊpbÊon the command line in lieu of the whole URL. For example, if you want to fetch all the information that Paul has but that you donÕt yet have in your repository, you can runÊgit fetch pb:
$ git fetch pb remote: Counting objects: 43, done. remote: Compressing objects: 100% (36/36), done. remote: Total 43 (delta 10), reused 31 (delta 5) Unpacking objects: 100% (43/43), done. From https://github.com/paulboone/ticgit  * [new branch]      master     -> pb/master  * [new branch]      ticgit     -> pb/ticgit
PaulÕs master branch is now accessible locally asÊpb/masterÊÐ you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it. (WeÕll go over what branches are and how to use them in much more detail inÊGit Branching.)
Fetching and Pulling from Your Remotes
As you just saw, to get data from your remote projects, you can run:
$ git fetch [remote-name]
The command goes out to that remote project and pulls down all the data from that remote project that you donÕt have yet. After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.
If you clone a repository, the command automatically adds that remote repository under the name ÒoriginÓ. So,Êgit fetch originÊfetches any new work that has been pushed to that server since you cloned (or last fetched from) it. ItÕs important to note that theÊgit fetchÊcommand only downloads the data to your local repository Ð it doesnÕt automatically merge it with any of your work or modify what youÕre currently working on. You have to merge it manually into your work when youÕre ready.
If your current branch is set up to track a remote branch (see the next section andÊGit BranchingÊfor more information), you can use theÊgit pullÊcommand to automatically fetch and then merge that remote branch into your current branch. This may be an easier or more comfortable workflow for you; and by default, theÊgit cloneÊcommand automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from. RunningÊgit pullÊgenerally fetches data from the server you originally cloned from and automatically tries to merge it into the code youÕre currently working on.
Pushing to Your Remotes
When you have your project at a point that you want to share, you have to push it upstream. The command for this is simple:Êgit push [remote-name] [branch-name]. If you want to push your master branch to yourÊoriginÊserver (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits youÕve done back up to the server:
$ git push origin master
This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime. If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected. YouÕll have to fetch their work first and incorporate it into yours before youÕll be allowed to push. SeeÊGit BranchingÊfor more detailed information on how to push to remote servers.
Inspecting a Remote
If you want to see more information about a particular remote, you can use theÊgit remote show [remote-name]Êcommand. If you run this command with a particular shortname, such asÊorigin, you get something like this:
$ git remote show origin 
* remote origin   Fetch URL: https://github.com/schacon/ticgit   Push  URL: https://github.com/schacon/ticgit   HEAD branch: master   Remote branches:     master                               tracked     dev-branch                           tracked   Local branch configured for 'git pull':     master merges with remote master   Local ref configured for 'git push':     master pushes to master (up to date)
It lists the URL for the remote repository as well as the tracking branch information. The command helpfully tells you that if youÕre on the master branch and you runÊgit pull, it will automatically merge in the master branch on the remote after it fetches all the remote references. It also lists all the remote references it has pulled down.
That is a simple example youÕre likely to encounter. When youÕre using Git more heavily, however, you may see much more information fromÊgit remote show:
$ git remote show origin * remote origin   URL: https://github.com/my-org/complex-project
   Fetch URL: https://github.com/my-org/complex-project   
Push  URL: https://github.com/my-org/complex-project   
HEAD branch: master   
Remote branches:     master                           
tracked     dev-branch                       tracked     markdown-strip                   tracked     issue-43                         new (next fetch will store in remotes/origin)     issue-45                         new (next fetch will store in remotes/origin)     refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)   Local branches configured for 'git pull':     dev-branch merges with remote dev-branch     master     merges with remote master   Local refs configured for 'git push':     dev-branch                     pushes to dev-branch                     (up to date)     markdown-strip                 pushes to markdown-strip                 (up to date)     master                         pushes to master                         (up to date)
This command shows which branch is automatically pushed to when you runÊgit pushÊwhile on certain branches. It also shows you which remote branches on the server you donÕt yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you runÊgit pull.
Removing and Renaming Remotes
You can runÊgit remote renameÊto change a remoteÕs shortname. For instance, if you want to renameÊpbÊtoÊpaul, you can do so withÊgit remote rename:
$ git remote rename pb paul 
$ git remote origin paul
ItÕs worth mentioning that this changes all your remote-tracking branch names, too. What used to be referenced atÊpb/masterÊis now atÊpaul/master.
If you want to remove a remote for some reason Ð youÕve moved the server or are no longer using a particular mirror, or perhaps a contributor isnÕt contributing anymore Ð you can either useÊgit remote removeÊorÊgit remote rm:
$ git remote remove paul 
$ git remote origin

More commands: 
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:Jayapradhakg/GIT_TIPS.git
git push -u origin master

git remote 
git remote -v
git remote delete < name>
git status . 
git stash
git clone 
git fetch
git merge
git pull => fetch and merge 
git push => sync to main repo.
